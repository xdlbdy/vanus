// Copyright 2022 Linkall Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package vanus.core.meta;

import "google/protobuf/struct.proto";

option go_package = "github.com/vanus-labs/vanus/proto/pkg/meta";

message VanusResourceName {
  string value = 1;
}

message Namespace {
  uint64 id = 1;
  string name = 2;
  string description = 3;
  int64 created_at = 4;
  int64 updated_at = 5;
}

message Eventbus {
  string name = 1;
  int32 log_number = 2;
  repeated Eventlog logs = 3;
  uint64 id = 4;
  string description = 5;
  int64 created_at = 6;
  int64 updated_at = 7;
  uint64 namespace_id = 8;
}

message Eventlog {
  reserved 1; // this field [string eventbus] was removed at v0.7.0, please use eventbus_id
  uint64 eventlog_id = 2;
  int32 current_segment_numbers = 3;
  repeated string server_address = 4;
  uint64 eventbus_id = 5;
}

message Block {
  uint64 id = 1;
  string endpoint = 2;
  uint64 volumeID = 3;
}

message Segment {
  uint64 id = 1;
  uint64 previous_segment_id = 2;
  uint64 next_segment_id = 3;
  uint64 eventlog_id = 4;
  int64 start_offset_in_log = 5;
  int64 end_offset_in_log = 6;
  int64 size = 7;
  int64 capacity = 8;
  int32 number_event_stored = 9;
  CompressAlgorithm compressed = 10;
  string state = 11;
  map<uint64, Block> replicas = 12;
  uint64 leader_block_id = 13;
  int64 first_event_born_at_by_unix_ms = 14;
  int64 last_evnet_born_at_by_unix_ms = 15;
}

message SegmentHealthInfo {
  uint64 id = 1;
  uint64 eventlog_id = 2;
  int64 capacity = 3;
  int64 size = 4;
  int32 event_number = 5;
  int32 serialization_version = 6;
  bool is_full = 7;
  uint64 leader = 8;
  uint64 term = 9;
  // Unix timestamp, unit is millisecond
  int64 first_event_born_time = 10;
  // Unix timestamp, unit is millisecond
  int64 last_event_born_time = 11;
}

enum StorageTier {
  MEMORY = 0;
  SSD = 1;
  HDD = 2;
  S3 = 3;
}

enum CompressAlgorithm {
  NONE = 0;
  LZ4 = 1;
}

message Subscription {
  string source = 1;
  repeated string types = 2;
  meta.SubscriptionConfig config = 3;
  repeated meta.Filter filters = 4;
  string sink = 5;
  meta.SinkCredential sink_credential = 6;
  meta.Protocol protocol = 7;
  meta.ProtocolSetting protocol_settings = 8;
  reserved 9; // this field [string eventbus] was removed at v0.7.0, please use eventbus_id
  meta.Transformer transformer = 10;
  string name = 11;
  string description = 12;
  bool disable = 13;
  int64 created_at = 14;
  int64 updated_at = 15;
  uint64 eventbus_id = 16;
  uint64 namespace_id = 17;

  uint64 id = 100;
  repeated OffsetInfo offsets = 101;
}

enum Protocol {
  HTTP = 0;
  AWS_LAMBDA = 1;
  GCLOUD_FUNCTIONS = 2;
  GRPC = 3;
}

message SinkCredential {
  enum CredentialType {
    None = 0;
    PLAIN = 1;
    AWS = 2;
    GCLOUD = 3;
  }
  CredentialType credential_type = 1;

  oneof credential {
    PlainCredential plain = 2;
    AKSKCredential aws = 3;
    GCloudCredential gcloud = 4;
  }
}

message PlainCredential {
  string identifier = 1;
  string secret = 2;
}

message AKSKCredential {
  string access_key_id = 1;
  string secret_access_key = 2;
}

message GCloudCredential {
  string credentials_json = 1;
}

message ProtocolSetting {
  map<string, string> headers = 1;
}

message SubscriptionConfig {
  uint32 rate_limit = 1;
  enum OffsetType {
    LATEST = 0;
    EARLIEST = 1;
    TIMESTAMP = 2;
  }
  OffsetType offset_type = 2;
  optional uint64 offset_timestamp = 3;
  // delivery timeout, unit milliseconds
  uint32 delivery_timeout = 4;
  optional uint32 max_retry_attempts = 5;
  bool disable_dead_letter = 6;
  bool ordered_event = 7;
}

message Filter {
  map<string, string> exact = 1;
  map<string, string> prefix = 2;
  map<string, string> suffix = 3;
  Filter not = 4;
  repeated Filter all = 5;
  repeated Filter any = 6;
  string sql = 7;
  string cel = 8;
  map<string,string> contains = 9;
}

message SubscriptionInfo {
  uint64 subscription_id = 1;
  repeated OffsetInfo offsets = 2;
}

message OffsetInfo {
  uint64 offset = 1;
  uint64 eventlog_id = 2;
}

message Transformer {
  map<string, string> define = 1;
  string template = 2;
  repeated Action pipeline = 3;
}

message Action {
  repeated google.protobuf.Value command = 1;
}
